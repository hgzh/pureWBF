; #author Little John, derivated by hgzh
; #url    http://www.purebasic.fr/english/viewtopic.php?p=467733#p467733

DeclareModule JSON
   Declare.s Get (jn.i, path$, quote$="")
   Declare.i Set (jn.i, path$, value$, quote$="'")
EndDeclareModule


Module JSON
   EnableExplicit
   
   Procedure.i _GetJSONValue (jn.i, path$)
      ; -- internal function
      Protected jv.i, depth.i, level.i, index.i, field$
     
      jv = JSONValue(jn)
     
      If jv <> 0 And path$ <> ""
         depth = CountString(path$, "\") + 1
         For level = 1 To depth
            field$ = StringField(path$, level, "\")
            If Left(field$, 1) = "[" And Right(field$, 1) = "]"
               index = Val(Mid(field$, 2, Len(field$)-2))
               If JSONType(jv) = #PB_JSON_Array And index >= 0 And index < JSONArraySize(jv)
                  jv = GetJSONElement(jv, index)
                  If jv = 0
                    ProcedureReturn 0
                  EndIf
               Else
                  jv = 0
               EndIf
            Else   
               If JSONType(jv) = #PB_JSON_Object
                  jv = GetJSONMember(jv, field$)   ; 0 if the given 'field$' does not exist in the object
                  If jv = 0
                    ProcedureReturn 0
                  EndIf
               Else
                  jv = 0
               EndIf
            EndIf
         Next   
      EndIf
     
      ProcedureReturn jv
   EndProcedure
   
   
   Procedure.s Get (jn.i, path$, quote$="")
      ; in : jn    : JSON number, e.g. generated by ParseJSON()
      ;      path$ : path to the JSON element that is to be retrieved
      ;      quote$: character that is regarded as quote
      ; out: value of the desired element
      Protected jv.i, ret$=""
     
      If jn
         jv = _GetJSONValue(jn, path$)
         If jv
            Select JSONType(jv)
               Case #PB_JSON_String
                  ret$ = quote$ + GetJSONString(jv) + quote$
               Case #PB_JSON_Boolean
                  If GetJSONBoolean(jv) = #True
                     ret$ = "true"
                  Else
                     ret$ = "false"
                  EndIf   
               Case #PB_JSON_Null
                  ret$ = "null"
               Case #PB_JSON_Number
                  ret$ = StrD(GetJSONDouble(jv))
               Case #PB_JSON_Array
                  ret$ = Str(jv)
            EndSelect     
         EndIf
      EndIf
     
      ProcedureReturn ret$
   EndProcedure
   
   
   Macro _IsNumber (_string_)
      ; -- internal macro
      Bool(_string_ <> "" And (Val(_string_) <> Val(_string_+"1") Or ValF(_string_) <> ValD(_string_+"1")))
   EndMacro
   
   Procedure.i Set (jn.i, path$, value$, quote$="'")
      ; in : jn    : JSON number, e.g. generated by ParseJSON()
      ;      path$ : path to the JSON element that is to be changed
      ;      value$: new value of the desired element
      ;      quote$: character that is regarded as quote
      ; out: #True on success, #False on error
      Protected jv.i, ret.i=#False
     
      If jn
         jv = _GetJSONValue(jn, path$)
         If jv
            If Left(value$, 1) = quote$ And Right(value$, 1) = quote$
               SetJSONString(jv, Mid(value$, 2, Len(value$)-2))
               ret = #True
            ElseIf value$ = "true"
               SetJSONBoolean(jv, #True)
               ret = #True
            ElseIf value$ = "false"
               SetJSONBoolean(jv, #False)
               ret = #True
            ElseIf value$ = "null"
               SetJSONNull(jv)
               ret = #True
            ElseIf _IsNumber(value$)
               SetJSONDouble(jv, ValD(value$))
               ret = #True
            EndIf 
         EndIf
      EndIf
     
      ProcedureReturn ret
   EndProcedure
EndModule